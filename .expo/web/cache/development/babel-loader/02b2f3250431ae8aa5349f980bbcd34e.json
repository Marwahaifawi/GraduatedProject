{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\MIDITECH\\\\Desktop\\\\GraduatedProject-master\\\\App.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { useState } from 'react';\nimport Navigator from \"./components/Navigation/Navigator\";\nimport AppLoading from 'expo-app-loading';\nimport * as Font from 'expo-font';\nvar fonts = {\n  'FontOne': require(\"./assets/fonts/Caveat-VariableFont_wght.ttf\"),\n  'FontTwo': require(\"./assets/fonts/Handlee-Regular.ttf\"),\n  'FontThree': require(\"./assets/fonts/Righteous-Regular.ttf\")\n};\n\nvar App = function (_React$Component) {\n  _inherits(App, _React$Component);\n\n  var _super = _createSuper(App);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      fontsLoaded: false\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"_loadFontsAsync\",\n    value: function _loadFontsAsync() {\n      return _regeneratorRuntime.async(function _loadFontsAsync$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Font.loadAsync(fonts));\n\n            case 2:\n              this.setState({\n                fontsLoaded: true\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._loadFontsAsync();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.fontsLoaded) {\n        return React.createElement(Navigator, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 9\n          }\n        });\n      } else {\n        return React.createElement(AppLoading, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 5\n          }\n        });\n      }\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport { App as default };","map":{"version":3,"sources":["C:/Users/MIDITECH/Desktop/GraduatedProject-master/App.js"],"names":["React","useState","Navigator","AppLoading","Font","fonts","require","App","state","fontsLoaded","loadAsync","setState","_loadFontsAsync","Component"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AACA,IAAIC,KAAK,GAAG;AACZ,aAAWC,OAAO,+CADN;AAEZ,aAAWA,OAAO,sCAFN;AAGZ,eAAYA,OAAO;AAHP,CAAZ;;IAMqBC,G;;;;;;;;;;;;;;;UACnBC,K,GAAQ;AACNC,MAAAA,WAAW,EAAE;AADP,K;;;;;;WAIR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACQL,IAAI,CAACM,SAAL,CAAeL,KAAf,CADR;;AAAA;AAEE,mBAAKM,QAAL,CAAc;AAAEF,gBAAAA,WAAW,EAAE;AAAf,eAAd;;AAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;WAKA,6BAAoB;AAClB,WAAKG,eAAL;AACD;;;WAED,kBAAS;AACP,UAAI,KAAKJ,KAAL,CAAWC,WAAf,EAA4B;AAC1B,eACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAGH,OAJC,MAKG;AACH,eACA,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADA;AAGD;AACF;;;;EAzBgCT,KAAK,CAACa,S;;SAAlBN,G","sourcesContent":["import React, { useState } from 'react';\nimport Navigator from './components/Navigation/Navigator';\nimport AppLoading from 'expo-app-loading';\nimport * as Font from 'expo-font';\nlet fonts = {\n'FontOne': require('./assets/fonts/Caveat-VariableFont_wght.ttf'),\n'FontTwo': require('./assets/fonts/Handlee-Regular.ttf'),\n'FontThree':require('./assets/fonts/Righteous-Regular.ttf'),\n};\n\nexport default class App extends React.Component {\n  state = {\n    fontsLoaded: false,\n  };\n\n  async _loadFontsAsync() {\n    await Font.loadAsync(fonts);\n    this.setState({ fontsLoaded: true });\n  }\n\n  componentDidMount() {\n    this._loadFontsAsync();\n  }\n\n  render() {\n    if (this.state.fontsLoaded) {\n      return (\n        <Navigator />\n    );\n  }\n  else {\n    return(\n    <AppLoading />\n    )\n  }\n}\n}"]},"metadata":{},"sourceType":"module"}